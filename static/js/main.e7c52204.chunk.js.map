{"version":3,"sources":["hooks/useCannon.js","components/Scene.js","components/Box.js","components/OrbitControl.js","serviceWorker.js","index.js","components/App.js"],"names":["context","React","createContext","Provider","children","useState","CANNON","world","useEffect","broadphase","solver","iterations","gravity","set","useFrame","step","value","Box","onClick","position","size","opacity","color","attach","args","transparent","roomHasItem","room","item","findIndex","child","indexOfRoomHasItem","rooms","checkItem","data","r","c","d","push","expandCheck","length","i","j","k","Math","floor","random","roomColors","toString","document","title","Scene","camera","useThree","fov","aspect","window","innerWidth","innerHeight","near","far","up","boxes","roomIndex","key","extend","OrbitControls","OrbitControl","controlsRef","useRef","gl","current","update","ref","domElement","enableRotate","enablePan","maxDistance","minDistance","minPolarAngle","PI","maxPolarAngle","Boolean","location","hostname","match","ReactDOM","render","className","shadowMap","intensity","angle","penumbra","castShadow","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7c52204.chunk.js","sourcesContent":["import * as CANNON from 'cannon'\nimport React, { useState, useEffect, useContext, useRef } from 'react'\nimport { useFrame } from 'react-three-fiber'\n\n// Cannon-world context provider\nconst context = React.createContext()\nexport function Provider({ children }) {\n  // Set up physics\n  const [world] = useState(() => new CANNON.World())\n  useEffect(() => {\n    world.broadphase = new CANNON.NaiveBroadphase()\n    world.solver.iterations = 10\n    world.gravity.set(0, 0, -25)\n  }, [world])\n\n  // Run world stepper every frame\n  useFrame(() => world.step(1 / 60))\n  // Distribute world via context\n  return <context.Provider value={world} children={children} />\n}\n\n// Custom hook to maintain a world physics body\nexport function useCannon({ ...props }, fn, deps = []) {\n  const ref = useRef()\n\n  // Get cannon world object\n  const world = useContext(context)\n\n  // Instanciate a physics body\n  const [body] = useState(() => new CANNON.Body(props))\n  \n  useEffect(() => {\n    // Call function so the user can add shapes\n    fn(body)\n    // Add body to world on mount\n    world.addBody(body)\n    // Remove body on unmount\n    return () => world.removeBody(body)\n  }, deps)\n\n  useFrame(() => {\n    if (ref.current) {\n      // Transport cannon physics into the referenced threejs object\n      ref.current.position.copy(body.position)\n      ref.current.quaternion.copy(body.quaternion)\n    }\n  })\n\n  return ref\n}\n","import React, {useState, useEffect} from 'react';\nimport {useThree} from 'react-three-fiber';\nimport {Provider} from '../hooks/useCannon';\n// import {Plane} from './Plane';\nimport {Box} from './Box';\n\nconst roomHasItem = (room, item) => room.findIndex(child => (item[0] === child[0] && item[1] === child[1] && item[2] === child[2])) > -1;\n\nconst indexOfRoomHasItem = (rooms, item) => rooms.findIndex(room => roomHasItem(room, item));\n\nconst checkItem = (data, r, c, d, room) => !roomHasItem(room, [r, c, d]) && data[r][c][d] === 1 && !roomHasItem(room, [r, c, d]) && room.push([r, c, d]);\n\nconst expandCheck = (data, r, c, d, room) => {\n\t(r > 0) && checkItem(data, r - 1, c, d, room) && expandCheck(data, r - 1, c, d, room);\n    (r < data.length - 1) && checkItem(data, r + 1, c, d, room) && expandCheck(data, r + 1, c, d, room);\n    \n\t(c > 0) && checkItem(data, r, c - 1, d, room) && expandCheck(data, r, c - 1, d, room);\n    (c < data[0].length - 1) && checkItem(data, r, c + 1, d, room) && expandCheck(data, r, c + 1, d, room);\n    \n\t(d > 0) && checkItem(data, r, c, d - 1, room) && expandCheck(data, r, c, d - 1, room);\n    (d < data[0][0].length - 1) && checkItem(data, r, c, d + 1, room) && expandCheck(data, r, c, d + 1, room);\n    \n\treturn room\n}\n\n\nconst max = 4;\nconst data = [];\n\nfor(let i = 0; i < max; i ++)\n{\n    data[i] = [];\n    for(let j = 0; j < max; j ++)\n    {\n        data[i][j] = [];\n        for(let k = 0; k < max; k ++)\n        {\n            data[i][j][k] = (Math.floor(Math.random() * 100) % 3 === 1) ? 1 : 0;\n        }\n    }\n}\n\nconst rooms = []\nfor(let r = 0; r < data.length; r++) \n    for(let c = 0; c < data[0].length; c++) \n        for(let d = 0; d < data[0][0].length; d++) \n            (indexOfRoomHasItem(rooms, [r, c, d]) === -1) && data[r][c][d] === 1 && rooms.push(expandCheck(data, r, c, d, [[r, c, d]]))\n\nconst randomColor = () => '#' + Math.floor(Math.random()*16777215).toString(16);\n\nconst roomColors = []\nfor(let i = 0; i < rooms.length; i++)\n{\n    roomColors.push(randomColor())\n}\n\n// console.log('Total rooms = ' + rooms.length)\n// console.log('Total rooms = ' + rooms.length, rooms, roomColors)\n\ndocument.title = rooms.length + ' room' + (rooms.length === 1 ? '' : '(s)')\n\n\nexport const Scene = () => {\n    // const [showPlane, set] = useState(true)\n\n    // When React removes (unmounts) the upper plane after 5 sec, objects should drop ...\n    // This may seem like magic, but as the plane unmounts it removes itself from cannon and that's that\n\n    // useEffect(() => void setTimeout(() => set(false), 5000), [])\n\n\n    const {camera} = useThree();\n\n    camera.fov = 45;\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.near = 0.1;\n    camera.far = 1000;\n  \n    camera.up.set(0, 0, 1);\n    camera.position.set(6, 7, 12);\n    \n\n    \n\n    const boxes = [];\n    for(let i = 0; i < data.length; i ++)\n    {\n        for(let j = 0; j < data[i].length; j ++)\n        {\n            for(let k = 0; k < data[i][j].length; k ++)\n            {\n                const roomIndex = indexOfRoomHasItem(rooms, [i, j, k])\n\n                boxes.push(<Box \n                    // onClick={e => {\n                    //     console.log('xx')\n                    // }} \n                    key={'' + i + j + k} \n                    position={[i, j, k]} \n                    size={0.98} \n                    color={roomColors[roomIndex]}\n                    opacity={data[i][j][k] ? 1 : 0.1} \n                />)\n            }\n        }\n    }\n\n\n    return (\n        <Provider>\n          {/* <Plane position={[0, 0, 3]} /> */}\n          {/* {showPlane && <Plane position={[0, 0, 0]} />} */}\n          {/* <Box position={[1, 0, 1]} />\n          <Box position={[2, 1, 5]} />\n          <Box position={[0, 0, 6]} />\n          <Box position={[-1, 1, 8]} />\n          <Box position={[-2, 2, 13]} />\n          <Box position={[2, -1, 13]} /> */}\n          {/* {!showPlane && <Box position={[0.5, 1.0, 20]} />} */}\n          {boxes}\n        </Provider>\n    )\n}\n","import React from 'react';\nimport {useCannon} from '../hooks/useCannon';\nimport * as CANNON from 'cannon';\n\nexport const Box = ({ onClick, position, size, opacity, color }) => {\n  // Register box as a physics body with mass\n\n//   const ref = useCannon({ mass: 100000 }, body => {\n//     body.addShape(new CANNON.Box(new CANNON.Vec3(0.5, 0.5, 0,5)))\n//     body.position.set(...position)\n//   })\n  \n  return (\n    <mesh \n        // onClick={onClick}\n        position={position}\n        // ref={ref} \n        // castShadow \n        // receiveShadow\n        >\n      <boxGeometry attach=\"geometry\" args={[size, size, size]} />\n      {/* <meshStandardMaterial attach=\"material\" opacity={opacity} transparent /> */}\n      <meshStandardMaterial color={color} attach=\"material\" opacity={opacity} transparent />\n    </mesh>\n  )\n}","import React, {useRef} from 'react';\nimport {extend, useThree, useFrame} from 'react-three-fiber';\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\n\nextend({ OrbitControls });\n\nexport const OrbitControl = () => {\n  const controlsRef = useRef();\n  const {camera, gl} = useThree();\n\n  useFrame(() => controlsRef.current && controlsRef.current.update());\n\n  return (\n    <orbitControls\n      ref={controlsRef}\n      args={[camera, gl.domElement]}\n      enableRotate\n      enablePan={false}\n      maxDistance={100}\n      minDistance={5}\n      minPolarAngle={Math.PI / 6}\n      maxPolarAngle={Math.PI / 2}\n    />\n  );\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport {App} from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport {Canvas} from 'react-three-fiber';\nimport {Scene} from './Scene';\nimport {OrbitControl} from './OrbitControl';\n\nexport const App = () => {\n    return (\n      <Canvas className=\"main\" shadowMap>\n        <ambientLight intensity={0.5} />\n        <spotLight intensity={0.6} position={[30, 30, 50]} angle={0.2} penumbra={1} castShadow />\n        <Scene/>\n        <OrbitControl/>\n      </Canvas>\n    )\n}\n"],"sourceRoot":""}